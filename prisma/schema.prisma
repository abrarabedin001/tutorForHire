// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  role           Role            @default(USER)
  password       String
  type           Type
  StudentProfile StudentProfile?
  TeacherProfile TeacherProfile?
  Chat           Chat[]
}

enum Type {
  TEACHER
  STUDENT
}

enum Role {
  USER
  ADMIN
}

model StudentProfile {
  id           String         @id @default(uuid())
  bio          String
  education    String
  Phone        String?
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String         @unique
  CourseEnroll CourseEnroll[]
  RatingReview RatingReview[]
  chatId       String?
  image        Bytes?
}

model TeacherProfile {
  id        String   @id @default(uuid())
  bio       String
  education String
  Phone     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  Course    Course[]
  chatId    String?
  image     String?
}

model Course {
  id               String         @id @default(uuid())
  title            String
  published        Boolean        @default(false)
  rate             Int            @default(0)
  description      String?
  seatStatus       Int?
  address          String?
  startDate        DateTime?
  endDate          DateTime?
  categories       String
  Chat             Chat[]
  CourseEnroll     CourseEnroll[]
  RatingReview     RatingReview[]
  teacherProfileId String
  TeacherProfile   TeacherProfile @relation(fields: [teacherProfileId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([title, teacherProfileId])
}

model CourseEnroll {
  id               String          @id @default(uuid())
  courseId         String
  StudentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)
  studentProfileId String?

  transaction_id String?
  paid           Boolean @default(false)
  Course         Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentProfileId])
}

model RatingReview {
  id               String          @id @default(uuid())
  courseId         String
  Course           Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  StudentProfile   StudentProfile? @relation(fields: [studentProfileId], references: [id], onDelete: Cascade)
  studentProfileId String?
  rate             Int             @default(0)
  comment          String?
  ratingReviewDate DateTime        @default(now())

  @@unique([courseId, studentProfileId])
}

model Chat {
  id         String   @id @default(uuid())
  courseId   String
  Course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId     String
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat       String?
  created_at DateTime @default(now())
}
